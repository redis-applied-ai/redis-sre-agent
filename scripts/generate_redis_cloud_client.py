#!/usr/bin/env python3
"""
Generate and vendor a Redis Cloud API client from the OpenAPI spec using openapi-python-client.

- Reads spec from source_documents/cloud/redis-cloud-api-spec.json
- Generates into a temporary directory
- Vendors only the Python package folder (redis_cloud_api_client) into
  redis_sre_agent/tools/cloud/redis_cloud/api_client

Requirements: openapi-python-client (added as a dev dependency)
"""

from __future__ import annotations

import shutil
import subprocess
import sys
from pathlib import Path

REPO_ROOT = Path(__file__).resolve().parent.parent
SPEC_PATH = REPO_ROOT / "source_documents" / "cloud" / "redis-cloud-api-spec.json"
CONFIG_PATH = REPO_ROOT / "scripts" / "openapi_python_client_config.json"
TMP_OUT = REPO_ROOT / "artifacts" / "generated" / "redis_cloud_api_client"
VENDOR_TARGET_ROOT = (
    REPO_ROOT / "redis_sre_agent" / "tools" / "cloud" / "redis_cloud" / "api_client"
)
PACKAGE_NAME = "redis_cloud_api_client"


def run(cmd: list[str]) -> None:
    print("$ ", " ".join(cmd))
    subprocess.check_call(cmd)


def try_generate() -> None:
    # Prefer module invocation in current interpreter; fall back to CLI on PATH
    module_cmd = [
        sys.executable,
        "-m",
        "openapi_python_client",
        "generate",
        "--path",
        str(SPEC_PATH),
        "--output-path",
        str(TMP_OUT),
        "--config",
        str(CONFIG_PATH),
    ]
    try:
        run(module_cmd)
        return
    except subprocess.CalledProcessError:
        # Fall back to "openapi-python-client" executable
        cli_cmd = [
            "openapi-python-client",
            "generate",
            "--path",
            str(SPEC_PATH),
            "--output-path",
            str(TMP_OUT),
            "--config",
            str(CONFIG_PATH),
        ]
        run(cli_cmd)


def main() -> None:
    if not SPEC_PATH.exists():
        print(f"Spec not found: {SPEC_PATH}", file=sys.stderr)
        sys.exit(1)

    # Clean temp output; let generator create the directory
    if TMP_OUT.exists():
        shutil.rmtree(TMP_OUT)

    # Run generator (with fallback)
    try_generate()

    # Locate the generated package dir inside TMP_OUT
    pkg_dir = TMP_OUT / PACKAGE_NAME
    if not pkg_dir.exists():
        # Fallback: search for any first-level directory containing __init__.py
        candidates = [p for p in TMP_OUT.iterdir() if p.is_dir() and (p / "__init__.py").exists()]
        if candidates:
            pkg_dir = candidates[0]
        else:
            print("Could not find generated package directory.", file=sys.stderr)
            sys.exit(2)

    # Prepare vendor target
    if VENDOR_TARGET_ROOT.exists():
        shutil.rmtree(VENDOR_TARGET_ROOT)
    VENDOR_TARGET_ROOT.mkdir(parents=True, exist_ok=True)

    # Copy the package into vendor target
    print(f"Vendoring {pkg_dir} -> {VENDOR_TARGET_ROOT}")
    for item in pkg_dir.iterdir():
        dest = VENDOR_TARGET_ROOT / item.name
        if item.is_dir():
            shutil.copytree(item, dest)
        else:
            shutil.copy2(item, dest)

    # Write a small README explaining vendoring
    readme_path = VENDOR_TARGET_ROOT / "VENDORED.md"
    readme_path.write_text(
        """
This directory contains a vendored client generated by openapi-python-client
from source_documents/cloud/redis-cloud-api-spec.json.

Regenerate using:

    python scripts/generate_redis_cloud_client.py

Do not edit files here by hand; re-generate from the OpenAPI spec instead.
""".strip()
    )

    print("Done. Vendored client is ready.")


if __name__ == "__main__":
    main()
