services:
  # Redis - Agent operational database and vector store
  redis:
    image: redis:8.2.1
    ports:
      - "7843:6379"  # Agent operational Redis
    volumes:
      - redis_data:/data
      - ./monitoring/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - sre-network

  # Redis Demo - Target instance for testing scenarios
  redis-demo:
    image: redis:8.2.1
    ports:
      - "7844:6379"  # Demo/testing Redis
    volumes:
      - redis_demo_data:/data
    labels:
      - "logging=true"  # Collected by promtail for Loki
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - sre-network

  # Redis Enterprise Software - Multi-node cluster for testing enterprise runbooks
  redis-enterprise-node1:
    image: kurtfm/rs:latest
    container_name: redis-enterprise-node1
    hostname: redis-enterprise-node1
    ports:
      - "8443:8443"   # HTTPS Cluster Manager UI
      - "9443:9443"   # REST API
      - "12000:12000" # Database port
      - "12001:12001" # Additional database port
      - "12002:12002" # Additional database port
    cap_add:
      - sys_resource
    volumes:
      - redis_enterprise_node1_data:/opt/redislabs/persist
    environment:
      - CLUSTER_FQDN=cluster.local
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 2G
    healthcheck:
      test: ["CMD", "curl", "-k", "-f", "https://localhost:8443/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      sre-network:
        ipv4_address: 172.28.0.10
        aliases:
          - redis-enterprise  # Add alias for backward compatibility

  redis-enterprise-node2:
    image: kurtfm/rs:latest
    container_name: redis-enterprise-node2
    hostname: redis-enterprise-node2
    ports:
      - "8444:8443"   # HTTPS Cluster Manager UI
      - "9444:9443"   # REST API
      - "12003:12000" # Database port
    cap_add:
      - sys_resource
    volumes:
      - redis_enterprise_node2_data:/opt/redislabs/persist
    environment:
      - CLUSTER_FQDN=cluster.local
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 2G
    healthcheck:
      test: ["CMD", "curl", "-k", "-f", "https://localhost:8443/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      sre-network:
        ipv4_address: 172.28.0.11
    depends_on:
      - redis-enterprise-node1

  redis-enterprise-node3:
    image: kurtfm/rs:latest
    container_name: redis-enterprise-node3
    hostname: redis-enterprise-node3
    ports:
      - "8445:8443"   # HTTPS Cluster Manager UI
      - "9445:9443"   # REST API
      - "12004:12000" # Database port
    cap_add:
      - sys_resource
    volumes:
      - redis_enterprise_node3_data:/opt/redislabs/persist
    environment:
      - CLUSTER_FQDN=cluster.local
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 2G
    healthcheck:
      test: ["CMD", "curl", "-k", "-f", "https://localhost:8443/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      sre-network:
        ipv4_address: 172.28.0.12
    depends_on:
      - redis-enterprise-node1

  # Alias for backward compatibility
  redis-enterprise:
    image: kurtfm/rs:latest
    container_name: redis-enterprise
    network_mode: "service:redis-enterprise-node1"
    depends_on:
      - redis-enterprise-node1
    entrypoint: ["tail", "-f", "/dev/null"]

  # Redis Exporter for Redis demo metrics
  redis-exporter:
    image: oliver006/redis_exporter:latest
    ports:
      - "9121:9121"
    environment:
      - REDIS_ADDR=redis://redis-demo:6379
      - REDIS_EXPORTER_LOG_FORMAT=txt
    depends_on:
      redis-demo:
        condition: service_healthy
    networks:
      - sre-network


  # Redis Exporter for Agent operational Redis metrics
  redis-exporter-agent:
    image: oliver006/redis_exporter:latest
    ports:
      - "9122:9121"
    environment:
      - REDIS_ADDR=redis://redis:6379
      - REDIS_EXPORTER_LOG_FORMAT=txt
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - sre-network

  # OPTIONAL: Redis Enterprise database exporter (expects a DB on 12000)
  # Enable if you create a database on the cluster
  redis-enterprise-exporter:
    image: oliver006/redis_exporter:latest
    ports:
      - "9123:9121"
    environment:
      - REDIS_ADDR=redis://redis-enterprise-node1:12000
      - REDIS_EXPORTER_LOG_FORMAT=txt
    depends_on:
      - redis-enterprise-node1
    networks:
      - sre-network

  # Pushgateway for demo metrics (Prometheus pulls from here; demos can push)
  pushgateway:
    image: prom/pushgateway:latest
    ports:
      - "9091:9091"
    networks:
      - sre-network

  # Prometheus - Metrics collection
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - sre-network

  # Grafana - Metrics visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
      - loki
    networks:
      - sre-network

  # Node Exporter - System metrics
  node-exporter:
    image: prom/node-exporter:latest
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - sre-network

  # SRE Agent API
  sre-agent:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - REDIS_URL=redis://redis:6379/0  # Internal container port stays 6379
      - TOOLS_PROMETHEUS_URL=http://prometheus:9090
      - TOOLS_LOKI_URL=http://loki:3100
      - GRAFANA_URL=http://grafana:3000
    depends_on:
      redis:
        condition: service_healthy
      prometheus:
        condition: service_started
    volumes:
      - .env:/app/.env
      - ./artifacts:/app/artifacts  # For data pipeline
      - ./redis_sre_agent:/app/redis_sre_agent  # Mount source code for development
      - ./tests:/app/tests  # Mount tests for development
    command: uv run uvicorn redis_sre_agent.api.app:app --host 0.0.0.0 --port 8000 --reload
    networks:
      - sre-network

  # SRE Agent Background Worker
  sre-worker:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - REDIS_URL=redis://redis:6379/0  # Internal container port stays 6379
      - TOOLS_PROMETHEUS_URL=http://prometheus:9090
      - TOOLS_LOKI_URL=http://loki:3100
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - .env:/app/.env
      - ./artifacts:/app/artifacts
      - /var/run/docker.sock:/var/run/docker.sock  # Mount Docker socket for log access
      - ./redis_sre_agent:/app/redis_sre_agent  # Mount source code for development
      - ./tests:/app/tests  # Mount tests for development
    command: uv run redis-sre-agent worker
    # Disable healthcheck for worker (it doesn't run a web server)
    healthcheck:
      disable: true
    networks:
      - sre-network

  # SRE Agent UI
  sre-ui:
    build:
      context: ./ui
      dockerfile: Dockerfile
      target: development
    ports:
      - "3002:3000"
    environment:
      - NODE_ENV=development
      - VITE_API_URL=http://sre-agent:8000
    depends_on:
      - sre-agent
    volumes:
      - ./ui:/app
      - /app/node_modules  # Anonymous volume for node_modules
    networks:
      - sre-network


  # Loki - Log aggregation
  loki:
    image: grafana/loki:3.5.0
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - loki_data:/loki
      - ./monitoring/loki/loki-config.yaml:/etc/loki/local-config.yaml:ro
    networks:
      - sre-network

  # Promtail - Log shipping to Loki
  promtail:
    image: grafana/promtail:3.5.0
    command: -config.file=/etc/promtail/config.yml
    volumes:
      - ./monitoring/loki/promtail-config.yaml:/etc/promtail/config.yml:ro
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - loki
    networks:
      - sre-network

networks:
  sre-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16

volumes:
  redis_data:
  redis_demo_data:
  redis_enterprise_node1_data:
  redis_enterprise_node2_data:
  redis_enterprise_node3_data:
  prometheus_data:
  grafana_data:
  loki_data:
